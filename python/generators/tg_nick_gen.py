import re
import itertools
from math import comb
import time
import random

# === CONFIGURATION ===
ONE_PASS_ONE_TIME_GEN = True  # –µ—Å–ª–∏ True = —Ç–æ –≤—ã–≤–æ–¥–∏–º –≤—Å–µ–≥–æ 1 —Å—Ç—Ä–æ–∫—É –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å

nick_length = 32              # –¥–ª–∏–Ω–∞ –Ω–∏–∫–∞: –æ—Ç 5 –¥–æ 32
char1 = "I"                   # –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
char2 = "l"                   # –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª
max_results = 0               # –º–∞–∫—Å–∏–º—É–º –∫–æ–ª-–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0 = –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)
max_file_size = "20GB"        # –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ 0 –∏–ª–∏ None)
min_char1_count = 1
max_char1_count = None
min_char2_count = 1
max_char2_count = None

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º —Å–∏–º–≤–æ–ª–æ–≤ (–∏–ª–∏ None)
max_char1_percent = 0.5       # –Ω–∞–ø—Ä–∏–º–µ—Ä: 0.3 = –Ω–µ –±–æ–ª—å—à–µ 30%
max_char2_percent = 0.5       # –Ω–∞–ø—Ä–∏–º–µ—Ä: None

output_file = "nicknames.txt"
# =======================

def parse_file_size(size_str):
    size_str = size_str.strip().upper()
    match = re.match(r"^(\d+(?:\.\d+)?)([KMG]?B)$", size_str)
    if not match:
        raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞. –ü—Ä–∏–º–µ—Ä: 100KB, 10MB, 1GB")
    num, unit = match.groups()
    num = float(num)
    multiplier = {
        "B": 1,
        "KB": 1024,
        "MB": 1024**2,
        "GB": 1024**3,
    }[unit]
    return int(num * multiplier)

def compute_max_results_by_size(max_size_bytes, line_length):
    return max_size_bytes // line_length

def format_bytes(size):
    for unit in ['B', 'KB', 'MB', 'GB']:
        if size < 1024.0:
            return f"{size:.2f} {unit}"
        size /= 1024.0
    return f"{size:.2f} TB"

if not (5 <= nick_length <= 32):
    raise ValueError("–î–ª–∏–Ω–∞ –Ω–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.")

line_length = nick_length + 1
max_size_bytes = parse_file_size(max_file_size)
max_by_size = compute_max_results_by_size(max_size_bytes, line_length)

c1_min = min_char1_count or 0
c1_max = nick_length if max_char1_count is None else min(max_char1_count, nick_length)
if max_char1_percent is not None:
    c1_max = min(c1_max, int(nick_length * max_char1_percent))
if max_char2_percent is not None:
    c1_min = max(c1_min, nick_length - int(nick_length * max_char2_percent))

valid_counts = []
for count_char1 in range(c1_min, c1_max + 1):
    count_char2 = nick_length - count_char1
    if count_char2 < (min_char2_count or 0):
        continue
    if max_char2_count is not None and count_char2 > max_char2_count:
        continue
    valid_counts.append(count_char1)

total_combinations = sum(comb(nick_length, c1) for c1 in valid_counts)
final_limit = min(
    total_combinations,
    max_results if max_results else total_combinations,
    max_by_size
)
estimated_file_size = final_limit * line_length
estimated_time_sec = final_limit / 50000

min_c2 = nick_length - c1_max
max_c2 = nick_length - c1_min
if min_char2_count is not None:
    min_c2 = max(min_c2, min_char2_count)
if max_char2_count is not None:
    max_c2 = min(max_c2, max_char2_count)

print("\n‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
print(f"‚Ä¢ –î–ª–∏–Ω–∞ –Ω–∏–∫–∞: {nick_length}")
print(f"‚Ä¢ –°–∏–º–≤–æ–ª—ã: char1 = '{char1}', char2 = '{char2}'")
print(f"‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ '{char1}': –æ—Ç {c1_min} –¥–æ {c1_max}")
print(f"‚Ä¢ –î–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª-–≤–æ '{char2}': –æ—Ç {min_c2} –¥–æ {max_c2}")
print(f"‚Ä¢ –¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å—Ç—Ä–æ–∫: {total_combinations}")
print(f"‚Ä¢ –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {final_limit}")
print(f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {format_bytes(estimated_file_size)}")
print(f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {estimated_time_sec:.1f} —Å–µ–∫")

if not ONE_PASS_ONE_TIME_GEN:
    def is_yes(s):
        return s.strip().lower() in ("", "y", "yes", "–¥", "–¥–∞")

    proceed = input("\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é? (Y/–î/Yes/–î–∞/N/–ù/No/–ù–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –î–∞): ").strip().lower()
    if not is_yes(proceed):
        print("‚õî –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        exit()

    written = 0
    start_time = time.time()

    with open(output_file, "w", encoding="utf-8") as f:
        for count_char1 in valid_counts:
            for positions in itertools.combinations(range(nick_length), count_char1):
                nickname = [char2] * nick_length
                for pos in positions:
                    nickname[pos] = char1
                f.write("".join(nickname) + "\n")
                written += 1
                if written >= final_limit:
                    break
            if written >= final_limit:
                break

    duration = time.time() - start_time
    print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {written} —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª: {output_file}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {duration:.2f} —Å–µ–∫")

else:
    from random import choice, sample

    def generate_one():
        count_char1 = choice(valid_counts)
        positions = sample(range(nick_length), count_char1)
        nickname = [char2] * nick_length
        for pos in positions:
            nickname[pos] = char1
        return "".join(nickname)

    def is_yes(s):
        return s.strip().lower() in ("", "y", "yes", "–¥", "–¥–∞")

    while True:
        print("\nüé≤ –°–ª—É—á–∞–π–Ω—ã–π –Ω–∏–∫: " + generate_one())
        again = input("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ 1 —Å—Ç—Ä–æ–∫–∏? (Y/–î/Yes/–î–∞/N/–ù/No/–ù–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –î–∞): ")
        if not is_yes(again):
            print("üëã –í—ã—Ö–æ–¥.")
            break
